{"ast":null,"code":"async function valueToTreeObject(octokit, owner, repo, path, value) {\n  // Text files can be changed through the .content key\n  if (typeof value === \"string\") {\n    return {\n      path,\n      mode: \"100644\",\n      content: value\n    };\n  } // Binary files need to be created first using the git blob API,\n  // then changed by referencing in the .sha key\n\n\n  const {\n    data\n  } = await octokit.request(\"POST /repos/{owner}/{repo}/git/blobs\", {\n    owner,\n    repo,\n    ...value\n  });\n  const blobSha = data.sha;\n  return {\n    path,\n    mode: \"100644\",\n    sha: blobSha\n  };\n}\n\nasync function createTree(state, changes) {\n  const {\n    octokit,\n    owner,\n    repo,\n    fork,\n    latestCommitSha,\n    latestCommitTreeSha\n  } = state;\n  const tree = (await Promise.all(Object.keys(changes.files).map(async path => {\n    const value = changes.files[path];\n\n    if (value === null) {\n      // Deleting a non-existent file from a tree leads to an \"GitRPC::BadObjectState\" error,\n      // so we only attempt to delete the file if it exists.\n      try {\n        // https://developer.github.com/v3/repos/contents/#get-contents\n        await octokit.request(\"HEAD /repos/{owner}/{repo}/contents/:path\", {\n          owner: fork,\n          repo,\n          ref: latestCommitSha,\n          path\n        });\n        return {\n          path,\n          mode: \"100644\",\n          sha: null\n        };\n      } catch (error) {\n        return;\n      }\n    } // When passed a function, retrieve the content of the file, pass it\n    // to the function, then return the result\n\n\n    if (typeof value === \"function\") {\n      let result;\n\n      try {\n        const {\n          data: file\n        } = await octokit.request(\"GET /repos/{owner}/{repo}/contents/:path\", {\n          owner: fork,\n          repo,\n          ref: latestCommitSha,\n          path\n        });\n        result = await value(Object.assign(file, {\n          exists: true\n        }));\n      } catch (error) {\n        // istanbul ignore if\n        if (error.status !== 404) throw error; // @ts-ignore\n\n        result = await value({\n          exists: false\n        });\n      }\n\n      if (result === null || typeof result === \"undefined\") return;\n      return valueToTreeObject(octokit, owner, repo, path, result);\n    }\n\n    return valueToTreeObject(octokit, owner, repo, path, value);\n  }))).filter(Boolean);\n\n  if (tree.length === 0) {\n    return null;\n  } // https://developer.github.com/v3/git/trees/#create-a-tree\n\n\n  const {\n    data: {\n      sha: newTreeSha\n    }\n  } = await octokit.request(\"POST /repos/{owner}/{repo}/git/trees\", {\n    owner: fork,\n    repo,\n    base_tree: latestCommitTreeSha,\n    tree\n  });\n  return newTreeSha;\n}\n\nasync function createCommit(state, treeCreated, changes) {\n  const {\n    octokit,\n    repo,\n    fork,\n    latestCommitSha\n  } = state;\n  const message = treeCreated ? changes.commit : typeof changes.emptyCommit === \"string\" ? changes.emptyCommit : changes.commit; // https://developer.github.com/v3/git/commits/#create-a-commit\n\n  const {\n    data: latestCommit\n  } = await octokit.request(\"POST /repos/{owner}/{repo}/git/commits\", {\n    owner: fork,\n    repo,\n    message,\n    tree: state.latestCommitTreeSha,\n    parents: [latestCommitSha]\n  });\n  return latestCommit.sha;\n}\n\nasync function composeCreatePullRequest(octokit, {\n  owner,\n  repo,\n  title,\n  body,\n  base,\n  head,\n  createWhenEmpty,\n  changes: changesOption,\n  draft = false\n}) {\n  const changes = Array.isArray(changesOption) ? changesOption : [changesOption];\n  if (changes.length === 0) throw new Error('[octokit-plugin-create-pull-request] \"changes\" cannot be an empty array');\n  const state = {\n    octokit,\n    owner,\n    repo\n  }; // https://developer.github.com/v3/repos/#get-a-repository\n\n  const {\n    data: repository,\n    headers\n  } = await octokit.request(\"GET /repos/{owner}/{repo}\", {\n    owner,\n    repo\n  });\n  const isUser = !!headers[\"x-oauth-scopes\"];\n\n  if (!repository.permissions) {\n    throw new Error(\"[octokit-plugin-create-pull-request] Missing authentication\");\n  }\n\n  if (!base) {\n    base = repository.default_branch;\n  }\n\n  state.fork = owner;\n\n  if (isUser && !repository.permissions.push) {\n    // https://developer.github.com/v3/users/#get-the-authenticated-user\n    const user = await octokit.request(\"GET /user\"); // https://developer.github.com/v3/repos/forks/#list-forks\n\n    const forks = await octokit.request(\"GET /repos/{owner}/{repo}/forks\", {\n      owner,\n      repo\n    });\n    const hasFork = forks.data.find(\n    /* istanbul ignore next - fork owner can be null, but we don't test that */\n    fork => fork.owner && fork.owner.login === user.data.login);\n\n    if (!hasFork) {\n      // https://developer.github.com/v3/repos/forks/#create-a-fork\n      await octokit.request(\"POST /repos/{owner}/{repo}/forks\", {\n        owner,\n        repo\n      });\n    }\n\n    state.fork = user.data.login;\n  } // https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\n\n\n  const {\n    data: [latestCommit]\n  } = await octokit.request(\"GET /repos/{owner}/{repo}/commits\", {\n    owner,\n    repo,\n    sha: base,\n    per_page: 1\n  });\n  state.latestCommitSha = latestCommit.sha;\n  state.latestCommitTreeSha = latestCommit.commit.tree.sha;\n  const baseCommitTreeSha = latestCommit.commit.tree.sha;\n\n  for (const change of changes) {\n    let treeCreated = false;\n\n    if (change.files && Object.keys(change.files).length) {\n      const latestCommitTreeSha = await createTree(state, change);\n\n      if (latestCommitTreeSha) {\n        state.latestCommitTreeSha = latestCommitTreeSha;\n        treeCreated = true;\n      }\n    }\n\n    if (treeCreated || change.emptyCommit !== false) {\n      state.latestCommitSha = await createCommit(state, treeCreated, change);\n    }\n  }\n\n  const hasNoChanges = baseCommitTreeSha === state.latestCommitTreeSha;\n\n  if (hasNoChanges && createWhenEmpty === false) {\n    return null;\n  } // https://developer.github.com/v3/git/refs/#create-a-reference\n\n\n  await octokit.request(\"POST /repos/{owner}/{repo}/git/refs\", {\n    owner: state.fork,\n    repo,\n    sha: state.latestCommitSha,\n    ref: `refs/heads/${head}`\n  }); // https://developer.github.com/v3/pulls/#create-a-pull-request\n\n  return await octokit.request(\"POST /repos/{owner}/{repo}/pulls\", {\n    owner,\n    repo,\n    head: `${state.fork}:${head}`,\n    base,\n    title,\n    body,\n    draft\n  });\n}\n\nconst VERSION = \"3.9.3\";\n/**\n * @param octokit Octokit instance\n */\n\nfunction createPullRequest(octokit) {\n  return {\n    createPullRequest: composeCreatePullRequest.bind(null, octokit)\n  };\n}\n\ncreatePullRequest.VERSION = VERSION;\nexport { composeCreatePullRequest, createPullRequest };","map":{"version":3,"sources":["../dist-src/value-to-tree-object.js","../dist-src/create-tree.js","../dist-src/create-commit.js","../dist-src/compose-create-pull-request.js","../dist-src/version.js","../dist-src/index.js"],"names":[],"mappings":"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","sourcesContent":["export async function valueToTreeObject(octokit, owner, repo, path, value) {\n    // Text files can be changed through the .content key\n    if (typeof value === \"string\") {\n        return {\n            path,\n            mode: \"100644\",\n            content: value,\n        };\n    }\n    // Binary files need to be created first using the git blob API,\n    // then changed by referencing in the .sha key\n    const { data } = await octokit.request(\"POST /repos/{owner}/{repo}/git/blobs\", {\n        owner,\n        repo,\n        ...value,\n    });\n    const blobSha = data.sha;\n    return {\n        path,\n        mode: \"100644\",\n        sha: blobSha,\n    };\n}\n","import { valueToTreeObject } from \"./value-to-tree-object\";\nexport async function createTree(state, changes) {\n    const { octokit, owner, repo, fork, latestCommitSha, latestCommitTreeSha, } = state;\n    const tree = (await Promise.all(Object.keys(changes.files).map(async (path) => {\n        const value = changes.files[path];\n        if (value === null) {\n            // Deleting a non-existent file from a tree leads to an \"GitRPC::BadObjectState\" error,\n            // so we only attempt to delete the file if it exists.\n            try {\n                // https://developer.github.com/v3/repos/contents/#get-contents\n                await octokit.request(\"HEAD /repos/{owner}/{repo}/contents/:path\", {\n                    owner: fork,\n                    repo,\n                    ref: latestCommitSha,\n                    path,\n                });\n                return {\n                    path,\n                    mode: \"100644\",\n                    sha: null,\n                };\n            }\n            catch (error) {\n                return;\n            }\n        }\n        // When passed a function, retrieve the content of the file, pass it\n        // to the function, then return the result\n        if (typeof value === \"function\") {\n            let result;\n            try {\n                const { data: file } = await octokit.request(\"GET /repos/{owner}/{repo}/contents/:path\", {\n                    owner: fork,\n                    repo,\n                    ref: latestCommitSha,\n                    path,\n                });\n                result = await value(Object.assign(file, { exists: true }));\n            }\n            catch (error) {\n                // istanbul ignore if\n                if (error.status !== 404)\n                    throw error;\n                // @ts-ignore\n                result = await value({ exists: false });\n            }\n            if (result === null || typeof result === \"undefined\")\n                return;\n            return valueToTreeObject(octokit, owner, repo, path, result);\n        }\n        return valueToTreeObject(octokit, owner, repo, path, value);\n    }))).filter(Boolean);\n    if (tree.length === 0) {\n        return null;\n    }\n    // https://developer.github.com/v3/git/trees/#create-a-tree\n    const { data: { sha: newTreeSha }, } = await octokit.request(\"POST /repos/{owner}/{repo}/git/trees\", {\n        owner: fork,\n        repo,\n        base_tree: latestCommitTreeSha,\n        tree,\n    });\n    return newTreeSha;\n}\n","export async function createCommit(state, treeCreated, changes) {\n    const { octokit, repo, fork, latestCommitSha } = state;\n    const message = treeCreated\n        ? changes.commit\n        : typeof changes.emptyCommit === \"string\"\n            ? changes.emptyCommit\n            : changes.commit;\n    // https://developer.github.com/v3/git/commits/#create-a-commit\n    const { data: latestCommit } = await octokit.request(\"POST /repos/{owner}/{repo}/git/commits\", {\n        owner: fork,\n        repo,\n        message,\n        tree: state.latestCommitTreeSha,\n        parents: [latestCommitSha],\n    });\n    return latestCommit.sha;\n}\n","import { createTree } from \"./create-tree\";\nimport { createCommit } from \"./create-commit\";\nexport async function composeCreatePullRequest(octokit, { owner, repo, title, body, base, head, createWhenEmpty, changes: changesOption, draft = false, }) {\n    const changes = Array.isArray(changesOption)\n        ? changesOption\n        : [changesOption];\n    if (changes.length === 0)\n        throw new Error('[octokit-plugin-create-pull-request] \"changes\" cannot be an empty array');\n    const state = { octokit, owner, repo };\n    // https://developer.github.com/v3/repos/#get-a-repository\n    const { data: repository, headers } = await octokit.request(\"GET /repos/{owner}/{repo}\", {\n        owner,\n        repo,\n    });\n    const isUser = !!headers[\"x-oauth-scopes\"];\n    if (!repository.permissions) {\n        throw new Error(\"[octokit-plugin-create-pull-request] Missing authentication\");\n    }\n    if (!base) {\n        base = repository.default_branch;\n    }\n    state.fork = owner;\n    if (isUser && !repository.permissions.push) {\n        // https://developer.github.com/v3/users/#get-the-authenticated-user\n        const user = await octokit.request(\"GET /user\");\n        // https://developer.github.com/v3/repos/forks/#list-forks\n        const forks = await octokit.request(\"GET /repos/{owner}/{repo}/forks\", {\n            owner,\n            repo,\n        });\n        const hasFork = forks.data.find(\n        /* istanbul ignore next - fork owner can be null, but we don't test that */\n        (fork) => fork.owner && fork.owner.login === user.data.login);\n        if (!hasFork) {\n            // https://developer.github.com/v3/repos/forks/#create-a-fork\n            await octokit.request(\"POST /repos/{owner}/{repo}/forks\", {\n                owner,\n                repo,\n            });\n        }\n        state.fork = user.data.login;\n    }\n    // https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\n    const { data: [latestCommit], } = await octokit.request(\"GET /repos/{owner}/{repo}/commits\", {\n        owner,\n        repo,\n        sha: base,\n        per_page: 1,\n    });\n    state.latestCommitSha = latestCommit.sha;\n    state.latestCommitTreeSha = latestCommit.commit.tree.sha;\n    const baseCommitTreeSha = latestCommit.commit.tree.sha;\n    for (const change of changes) {\n        let treeCreated = false;\n        if (change.files && Object.keys(change.files).length) {\n            const latestCommitTreeSha = await createTree(state, change);\n            if (latestCommitTreeSha) {\n                state.latestCommitTreeSha = latestCommitTreeSha;\n                treeCreated = true;\n            }\n        }\n        if (treeCreated || change.emptyCommit !== false) {\n            state.latestCommitSha = await createCommit(state, treeCreated, change);\n        }\n    }\n    const hasNoChanges = baseCommitTreeSha === state.latestCommitTreeSha;\n    if (hasNoChanges && createWhenEmpty === false) {\n        return null;\n    }\n    // https://developer.github.com/v3/git/refs/#create-a-reference\n    await octokit.request(\"POST /repos/{owner}/{repo}/git/refs\", {\n        owner: state.fork,\n        repo,\n        sha: state.latestCommitSha,\n        ref: `refs/heads/${head}`,\n    });\n    // https://developer.github.com/v3/pulls/#create-a-pull-request\n    return await octokit.request(\"POST /repos/{owner}/{repo}/pulls\", {\n        owner,\n        repo,\n        head: `${state.fork}:${head}`,\n        base,\n        title,\n        body,\n        draft,\n    });\n}\n","export const VERSION = \"3.9.3\";\n","import { composeCreatePullRequest } from \"./compose-create-pull-request\";\nimport { VERSION } from \"./version\";\n/**\n * @param octokit Octokit instance\n */\nexport function createPullRequest(octokit) {\n    return {\n        createPullRequest: composeCreatePullRequest.bind(null, octokit),\n    };\n}\nexport { composeCreatePullRequest } from \"./compose-create-pull-request\";\ncreatePullRequest.VERSION = VERSION;\n"]},"metadata":{},"sourceType":"module"}